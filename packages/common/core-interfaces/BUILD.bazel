# BUILD.bazel for @fluidframework/core-interfaces
# Prototype: js_library + npm_package approach for workspace package resolution

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")

package(default_visibility = ["//visibility:public"])

# Link npm packages for this workspace package
npm_link_all_packages(name = "node_modules")

# ESM compilation
ts_project(
    name = "core_interfaces_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/cjs/**",
        ],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "lib",
    root_dir = "src",
    tsconfig = ":tsconfig.bazel.json",
)

# CommonJS compilation
ts_project(
    name = "core_interfaces_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/cjs/**",
        ],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
    tsconfig = ":tsconfig.cjs.bazel.json",
)

# js_library wrapping the compiled outputs
# This provides JsInfo for npm_package
js_library(
    name = "lib",
    srcs = [
        ":core_interfaces_esm",
        ":core_interfaces_cjs",
        "package.json",  # Include package.json with exports field
    ],
)

# npm_package makes this linkable via npm_link_all_packages
# This target is what gets linked in the node_modules
npm_package(
    name = "pkg",
    srcs = [":lib"],
    # package name is read from package.json
    visibility = ["//visibility:public"],
)

# Legacy filegroup for backward compatibility
filegroup(
    name = "core_interfaces",
    srcs = [
        ":core_interfaces_esm",
        ":core_interfaces_cjs",
    ],
)

# ============================================================================
# Test Integration (Session 4.2)
# ============================================================================
# Mocha test compilation with proper @types resolution

# Test compilation (ESM)
ts_project(
    name = "core_interfaces_test",
    srcs = glob(
        ["src/test/**/*.ts"],
        exclude = [
            "src/test/types/**",  # Type validation tests
            "src/test/**/*.d.ts",  # Type declaration files
            "src/test/jsonSerializable.exactOptionalPropertyTypes.false.spec.ts",  # Excluded in tsconfig
        ],
    ) + ["package.json"],
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib-test/test",
    root_dir = "src/test",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
        ":core_interfaces_esm",  # Depend on compiled package output
        ":node_modules/@types/mocha",
        ":node_modules/@types/node",
        ":pkg",  # Add pkg to align with new pattern (may be redundant but consistent)
    ],
)

# Mocha test runner
mocha_bin.mocha_test(
    name = "test",
    args = [
        "packages/common/core-interfaces/lib-test/test/**/*.spec.js",
        "--exit",
    ],
    data = [
        ":core_interfaces_test",
        ":pkg",  # Runtime needs package with subpath exports,
        "package.json",
    ],
    tags = ["manual"],  # Mark as manual until validated
)
