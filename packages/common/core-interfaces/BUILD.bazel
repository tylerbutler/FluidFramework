# BUILD.bazel for @fluidframework/core-interfaces
# Auto-generated - Minimal PoC version

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")

package(default_visibility = ["//visibility:public"])

# ESM compilation
ts_project(
    name = "core_interfaces_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/cjs/**",
        ],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "lib",
    root_dir = "src",
    tsconfig = ":tsconfig.bazel.json",
)

# CommonJS compilation
ts_project(
    name = "core_interfaces_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/cjs/**",
        ],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
    tsconfig = ":tsconfig.cjs.bazel.json",
)

# Test compilation (ESM)
ts_project(
    name = "core_interfaces_test",
    srcs = glob(
        ["src/test/**/*.ts"],
        exclude = [
            "src/test/types/**",  # Type validation tests require build-tools
            "src/test/mocha.d.ts",  # Type declaration file
        ],
    ),
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib/test",
    root_dir = "src/test",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
        ":core_interfaces_esm",
        "//:node_modules/mocha",
    ],
)

# Mocha test runner
mocha_bin.mocha_test(
    name = "test",
    args = [
        "lib/test/**/*.spec.js",
        "--exit",
    ],
    data = [
        ":core_interfaces_test",
    ],
)

# Default target builds both ESM and CJS
filegroup(
    name = "core_interfaces",
    srcs = [
        ":core_interfaces_esm",
        ":core_interfaces_cjs",
    ],
)
