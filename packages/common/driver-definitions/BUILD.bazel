# BUILD.bazel for @fluidframework/driver-definitions
# Retrofitted for npm_package approach (Session 2.15)

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")

package(default_visibility = ["//visibility:public"])

# Link npm packages for this workspace package
npm_link_all_packages(name = "node_modules")

ts_project(
    name = "driver_definitions_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "lib",
    root_dir = "src",
    tsconfig = ":tsconfig.bazel.json",
    deps = [
        "//packages/common/core-interfaces:core_interfaces_esm",
    ],
)

# CommonJS compilation
ts_project(
    name = "driver_definitions_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ),
    declaration = True,
    declaration_map = True,
    source_map = True,
    composite = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
    tsconfig = ":tsconfig.cjs.bazel.json",
    deps = [
        "//packages/common/core-interfaces:core_interfaces_cjs",
    ],
)

# Default target builds both ESM and CJS

# js_library wrapping compiled outputs
# Provides JsInfo for npm_package and includes package.json with exports field
js_library(
    name = "lib",
    srcs = [
        ":driver_definitions_esm",
        ":driver_definitions_cjs",
        "package.json",
    ],
)

# npm_package makes this linkable via npm_link_all_packages
# This enables TypeScript to resolve subpath exports (/internal, /legacy, etc.)
npm_package(
    name = "pkg",
    srcs = [":lib"],
    visibility = ["//visibility:public"],
)

# Legacy filegroup for backward compatibility
filegroup(
    name = "driver_definitions",
    srcs = [
        ":driver_definitions_esm",
        ":driver_definitions_cjs",
    ],
)

# ============================================================================
# Test Integration (Added)
# ============================================================================
# Mocha test compilation pattern update

ts_project(
    name = "driver_definitions_test",
    srcs = glob([
        "src/test/**/*.ts",
    ], exclude = [
        "src/test/**/*.d.ts",
    ]) + ["package.json"],
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib-test/test",
    root_dir = "src/test",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
        ":driver_definitions_esm",  # Expose compiled package
        ":pkg",
    ],
)

load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")
mocha_bin.mocha_test(
    name = "test",
    args = [
        "packages/common/driver-definitions/lib-test/test/**/*.spec.js",
        "--exit",
    ],
    data = [
        ":driver_definitions_test",
        ":pkg",  # Runtime needs package with subpath exports

    ],
    tags = ["manual"],
)
