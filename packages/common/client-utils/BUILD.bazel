# BUILD.bazel for @fluid-internal/client-utils
# Retrofitted for npm_package approach (Session 2.15)

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")

package(default_visibility = ["//visibility:public"])

# Link npm packages for this workspace package
npm_link_all_packages(name = "node_modules")

ts_project(
    name = "client_utils_cts",
    srcs = glob(["src/**/*.cts"]),
    declaration = True,
    declaration_map = True,
    composite = True,
    incremental = True,
    source_map = True,
    out_dir = "lib",  # Output to lib/ for ESM imports
    root_dir = "src",
    tsconfig = ":tsconfig.cts.bazel.json",
    deps = [
        ":node_modules/events_pkg",
    ],
)

# ESM compilation
ts_project(
    name = "client_utils_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/**/*.cts",  # Exclude .cts files from ESM build
        ],
    ),
    declaration = True,
    declaration_map = True,
    composite = True,
    incremental = True,
    source_map = True,
    out_dir = "lib",
    root_dir = "src",
    tsconfig = ":tsconfig.bazel.json",
    deps = [
        ":client_utils_cts",  # Depend on .cts compilation output
        ":node_modules/base64-js",
        ":node_modules/buffer",
        ":node_modules/events_pkg",
        ":node_modules/sha.js",
        "//packages/common/core-interfaces:core_interfaces_esm",
        "//packages/common/core-utils:core_utils_esm",
    ],
)

# .cts â†’ .cjs compilation for CJS build (to dist/)
ts_project(
    name = "client_utils_cts_cjs",
    srcs = glob(["src/**/*.cts"]),
    declaration = True,
    declaration_map = True,
    composite = True,
    incremental = True,
    source_map = True,
    out_dir = "dist",  # Output to dist/ for CJS imports
    root_dir = "src",
    tsconfig = ":tsconfig.cts.bazel.json",
    deps = [
        ":node_modules/events_pkg",
    ],
)

# CommonJS compilation
ts_project(
    name = "client_utils_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",
            "src/**/*.cts",  # Exclude .cts files from CJS build
        ],
    ),
    declaration = True,
    declaration_map = True,
    composite = True,
    incremental = True,
    source_map = True,
    out_dir = "dist",
    root_dir = "src",
    tsconfig = ":tsconfig.cjs.bazel.json",
    deps = [
        ":client_utils_cts_cjs",  # Depend on .cts compilation output
        ":node_modules/base64-js",
        ":node_modules/buffer",
        ":node_modules/events_pkg",
        ":node_modules/sha.js",
        "//packages/common/core-interfaces:core_interfaces_cjs",
        "//packages/common/core-utils:core_utils_cjs",
    ],
)

# Default target builds both ESM and CJS

# js_library wrapping compiled outputs
# Provides JsInfo for npm_package and includes package.json with exports field
js_library(
    name = "lib",
    srcs = [
        ":client_utils_esm",
        ":client_utils_cjs",
        "package.json",
    ],
)

# npm_package makes this linkable via npm_link_all_packages
# This enables TypeScript to resolve subpath exports (/internal, /legacy, etc.)
npm_package(
    name = "pkg",
    srcs = [":lib"],
    visibility = ["//visibility:public"],
)

# Legacy filegroup for backward compatibility
filegroup(
    name = "client_utils",
    srcs = [
        ":client_utils_esm",
        ":client_utils_cjs",
    ],
)
