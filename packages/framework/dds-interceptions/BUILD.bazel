load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")

npm_link_all_packages(name = "node_modules")

# ESM build
ts_project(
    name = "dds_interceptions_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    tsconfig = "tsconfig.bazel.json",
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    source_map = True,
    transpiler = "tsc",
    ts_build_info_file = "lib/.tsbuildinfo",
    out_dir = "lib",
    root_dir = "src",
    deps = [
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/map",
        ":node_modules/@fluidframework/merge-tree",
        ":node_modules/@fluidframework/runtime-definitions",
        ":node_modules/@fluidframework/sequence",
    ],
)

# CJS build
ts_project(
    name = "dds_interceptions_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    tsconfig = "tsconfig.cjs.bazel.json",
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    source_map = True,
    transpiler = "tsc",
    ts_build_info_file = "dist/.tsbuildinfo",
    out_dir = "dist",
    root_dir = "src",
    deps = [
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/map",
        ":node_modules/@fluidframework/merge-tree",
        ":node_modules/@fluidframework/runtime-definitions",
        ":node_modules/@fluidframework/sequence",
    ],
)

# Copy CJS package.json marker
genrule(
    name = "copy_cjs_package_json",
    srcs = ["//common/build/build-common/src/cjs:package.json"],
    outs = ["dist/package.json"],
    cmd = "cp $< $@",
)

# js_library wrapper for npm_package
js_library(
    name = "lib",
    srcs = [
        ":dds_interceptions_cjs",
        ":dds_interceptions_esm",
        ":copy_cjs_package_json",
        "package.json",
    ],
)

# npm_package for npm_link_all_packages
npm_package(
    name = "pkg",
    srcs = [":lib"],
    package = "@fluid-experimental/dds-interceptions",
    visibility = ["//visibility:public"],
)


# ============================================================================
# API Extractor Integration (Phase 6)
# ============================================================================

# Generate entrypoint files for API Extractor
sh_binary(
    name = "generate_entrypoints",
    srcs = ["//tools/bazel:run-flub-entrypoints.sh"],
    args = [
        "packages/framework/dds-interceptions",
        "lib",
    ],
    data = [
        ":dds_interceptions_esm",
        "//tools/bazel:run-flub-entrypoints.sh",
    ],
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor.json
sh_binary(
    name = "api_reports",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/framework/dds-interceptions",
        "api-extractor.json",
    ],
    data = [
        ":dds_interceptions_esm",
        "api-extractor.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-bundle.json
sh_binary(
    name = "api_reports_api-extractor-lint-bundle",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/framework/dds-interceptions",
        "api-extractor/api-extractor-lint-bundle.json",
    ],
    data = [
        ":dds_interceptions_esm",
        "api-extractor/api-extractor-lint-bundle.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-index.cjs.json
sh_binary(
    name = "api_reports_api-extractor-lint-index.cjs",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/framework/dds-interceptions",
        "api-extractor/api-extractor-lint-index.cjs.json",
    ],
    data = [
        ":dds_interceptions_esm",
        "api-extractor/api-extractor-lint-index.cjs.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-index.esm.json
sh_binary(
    name = "api_reports_api-extractor-lint-index.esm",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/framework/dds-interceptions",
        "api-extractor/api-extractor-lint-index.esm.json",
    ],
    data = [
        ":dds_interceptions_esm",
        "api-extractor/api-extractor-lint-index.esm.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Backward compatibility filegroup
filegroup(
    name = "dds_interceptions",
    srcs = [":pkg"],
    visibility = ["//visibility:public"],
)

# ============================================================================
# Test Integration (Session 4.3)
# ============================================================================
# Mocha test compilation with proper @types resolution

# Test compilation (ESM)
ts_project(
    name = "dds_interceptions_test",
    srcs = glob(
        ["src/test/**/*.ts"],
        exclude = [
            "src/test/types/**",  # Type validation tests
            "src/test/**/*.d.ts",  # Type declaration files
        ],
    ) + glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",  # Already included above
            "src/cjs/**",  # CJS-specific files
        ],
    ) + ["package.json"],  # Fix TS1479: TypeScript needs package.json for module detection
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib-test",
    root_dir = "src",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
		":node_modules/@fluidframework/core-utils",
		":node_modules/@fluidframework/map",
		":node_modules/@fluidframework/merge-tree",
		":node_modules/@fluidframework/runtime-definitions",
		":node_modules/@fluidframework/sequence",
		":node_modules/@fluidframework/test-runtime-utils",
		":node_modules/@types/diff",
		":node_modules/@types/mocha",
		":node_modules/@types/node",
		":node_modules/diff",
	],
)

# Mocha test runner
mocha_bin.mocha_test(
    name = "test",
    args = [
        "packages/framework/dds-interceptions/lib-test/test/**/*.spec.js",
        "--exit",
    ],
    data = [":dds_interceptions_test",,
        "package.json",  # Needed for Node to detect ESM module type
    ],
    tags = ["manual"],  # Mark as manual until validated
)
