# BUILD.bazel for @fluidframework/local-driver
# Local development driver for Fluid Framework

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")

npm_link_all_packages(name = "node_modules")

package(default_visibility = ["//visibility:public"])

# ESM compilation
ts_project(
    name = "local_driver_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["src/package.json"],
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    out_dir = "lib",
    root_dir = "src",
    source_map = True,
    ts_build_info_file = "lib/tsconfig.esm.tsbuildinfo",
    tsconfig = "tsconfig.bazel.json",
    deps = [
        ":node_modules/@fluid-internal/client-utils",
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/driver-base",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/protocol-base",
        ":node_modules/@fluidframework/routerlicious-driver",
        ":node_modules/@fluidframework/server-local-server",
        ":node_modules/@fluidframework/server-services-client",
        ":node_modules/@fluidframework/server-services-core",
        ":node_modules/@fluidframework/server-test-utils",
        ":node_modules/@fluidframework/telemetry-utils",
        ":node_modules/jsrsasign",
        ":node_modules/socket.io-client",
        ":node_modules/uuid",
        "//packages/common/client-utils:lib",
        "//packages/common/core-interfaces:lib",
        "//packages/common/core-utils:lib",
        "//packages/drivers/driver-base:lib",
        "//packages/common/driver-definitions:lib",
        "//packages/loader/driver-utils:lib",
        "//packages/drivers/routerlicious-driver:lib",
        "//packages/utils/telemetry-utils:lib",
    ],
)

# CJS compilation
ts_project(
    name = "local_driver_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["src/package.json"],
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
    source_map = True,
    transpiler = "tsc",
    ts_build_info_file = "dist/tsconfig.cjs.tsbuildinfo",
    tsconfig = "tsconfig.cjs.bazel.json",
    deps = [
        ":node_modules/@fluid-internal/client-utils",
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/driver-base",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/protocol-base",
        ":node_modules/@fluidframework/routerlicious-driver",
        ":node_modules/@fluidframework/server-local-server",
        ":node_modules/@fluidframework/server-services-client",
        ":node_modules/@fluidframework/server-services-core",
        ":node_modules/@fluidframework/server-test-utils",
        ":node_modules/@fluidframework/telemetry-utils",
        ":node_modules/jsrsasign",
        ":node_modules/socket.io-client",
        ":node_modules/uuid",
        "//packages/common/client-utils:lib",
        "//packages/common/core-interfaces:lib",
        "//packages/common/core-utils:lib",
        "//packages/drivers/driver-base:lib",
        "//packages/common/driver-definitions:lib",
        "//packages/loader/driver-utils:lib",
        "//packages/drivers/routerlicious-driver:lib",
        "//packages/utils/telemetry-utils:lib",
    ],
)

# Copy ESM package marker to lib/ and dist/
genrule(
    name = "copy_src_package_json_to_lib",
    srcs = ["package.esm.json"],
    outs = ["lib/package.json"],
    cmd = "cp $< $@",
)

# Copy ESM package marker to dist/
genrule(
    name = "copy_src_package_json_to_dist",
    srcs = ["package.esm.json"],
    outs = ["dist/package.json"],
    cmd = "cp $< $@",
)

# Package for TypeScript subpath exports
js_library(
    name = "lib",
    srcs = [
        ":local_driver_cjs",
        ":local_driver_esm",
        ":copy_src_package_json_to_lib",
        ":copy_src_package_json_to_dist",
        "package.json",
    ],
)

npm_package(
    name = "pkg",
    srcs = [":lib"],
    package = "@fluidframework/local-driver",
)

# Backward compatibility target
filegroup(
    name = "local_driver",
    srcs = [
        ":local_driver_cjs",
        ":local_driver_esm",
    ],
)

# ============================================================================
# Test Integration (Session 4.3)
# ============================================================================
# Mocha test compilation with proper @types resolution

# Test compilation (ESM)
ts_project(
    name = "local_driver_test",
    srcs = glob(
        ["src/test/**/*.ts"],
        exclude = [
            "src/test/types/**",  # Type validation tests
            "src/test/**/*.d.ts",  # Type declaration files
        ],
    ) + glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",  # Already included above
            "src/cjs/**",  # CJS-specific files
        ],
    ) + ["package.json"],
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib-test",
    root_dir = "src",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
		":local_driver_esm",  # For TypeScript module resolution
		":pkg",  # For runtime package resolution with subpath exports
		":node_modules/@types/mocha",
		":node_modules/@types/node",
		"//packages/common/client-utils:lib",
		"//packages/common/core-interfaces:lib",
		"//packages/common/core-utils:lib",
		"//packages/drivers/driver-base:lib",
		"//packages/common/driver-definitions:lib",
		"//packages/loader/driver-utils:lib",
		"//packages/drivers/routerlicious-driver:lib",
		"//packages/utils/telemetry-utils:lib",
		":node_modules/@fluidframework/core-interfaces",
		":node_modules/@fluidframework/core-utils",
		":node_modules/@fluidframework/driver-base",
		":node_modules/@fluidframework/driver-definitions",
		":node_modules/@fluidframework/driver-utils",
		":node_modules/@fluidframework/protocol-base",
		":node_modules/@fluidframework/routerlicious-driver",
		":node_modules/@fluidframework/server-local-server",
		":node_modules/@fluidframework/server-services-client",
		":node_modules/@fluidframework/server-services-core",
		":node_modules/@fluidframework/server-test-utils",
		":node_modules/@fluidframework/telemetry-utils",
		":node_modules/@fluid-internal/client-utils",
		":node_modules/jsrsasign",
		":node_modules/socket.io-client",
		":node_modules/uuid",
	],
)

# Mocha test runner
mocha_bin.mocha_test(
    name = "test",
    args = [
        "packages/drivers/local-driver/lib-test/test/**/*.spec.js",
        "--exit",
    ],
    data = [
        ":local_driver_test",
        ":pkg",  # Runtime needs package with subpath exports

    ],
    tags = ["manual"],  # Mark as manual until validated
)
