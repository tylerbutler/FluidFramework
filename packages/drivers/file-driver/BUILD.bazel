load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")

package(default_visibility = ["//:__subpackages__"])

# Link npm packages for this workspace package
npm_link_all_packages(name = "node_modules")

# ESM build
ts_project(
    name = "file_driver_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    declaration = True,
    declaration_map = True,
    incremental = True,
    source_map = True,
    composite = True,
    out_dir = "lib",
    root_dir = "src",
    tsconfig = ":tsconfig.bazel.json",
    deps = [
        ":node_modules/@types/node",
        ":node_modules/@fluid-internal/client-utils",
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/replay-driver",
    ],
)

# CJS build
ts_project(
    name = "file_driver_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    declaration = True,
    declaration_map = True,
    incremental = True,
    source_map = True,
    composite = True,
    out_dir = "dist",
    tsconfig = ":tsconfig.cjs.bazel.json",
    deps = [
        ":node_modules/@types/node",
        ":node_modules/@fluid-internal/client-utils",
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/core-utils",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/replay-driver",
    ],
)

# js_library wrapper with package.json in srcs
js_library(
    name = "lib",
    srcs = [
        ":file_driver_esm",
        ":file_driver_cjs",
        "package.json",
    ],
)

# npm_package - REQUIRED for npm_link_all_packages
npm_package(
    name = "pkg",
    srcs = [":lib"],
    package = "@fluidframework/file-driver",
    visibility = ["//visibility:public"],
)


# ============================================================================
# API Extractor Integration (Phase 6)
# ============================================================================

# Generate entrypoint files for API Extractor
sh_binary(
    name = "generate_entrypoints",
    srcs = ["//tools/bazel:run-flub-entrypoints.sh"],
    args = [
        "packages/drivers/file-driver",
        "lib",
    ],
    data = [
        ":file_driver_esm",
        "//tools/bazel:run-flub-entrypoints.sh",
    ],
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor.json
sh_binary(
    name = "api_reports",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/file-driver",
        "api-extractor.json",
    ],
    data = [
        ":file_driver_esm",
        "api-extractor.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-bundle.json
sh_binary(
    name = "api_reports_api-extractor-lint-bundle",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/file-driver",
        "api-extractor/api-extractor-lint-bundle.json",
    ],
    data = [
        ":file_driver_esm",
        "api-extractor/api-extractor-lint-bundle.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-public.cjs.json
sh_binary(
    name = "api_reports_api-extractor-lint-public.cjs",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/file-driver",
        "api-extractor/api-extractor-lint-public.cjs.json",
    ],
    data = [
        ":file_driver_esm",
        "api-extractor/api-extractor-lint-public.cjs.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-public.esm.json
sh_binary(
    name = "api_reports_api-extractor-lint-public.esm",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/file-driver",
        "api-extractor/api-extractor-lint-public.esm.json",
    ],
    data = [
        ":file_driver_esm",
        "api-extractor/api-extractor-lint-public.esm.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Backward compatibility filegroup
filegroup(
    name = "file_driver",
    srcs = [":lib"],
)
