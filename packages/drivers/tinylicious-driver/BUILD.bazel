# BUILD.bazel for @fluidframework/tinylicious-driver
# Auto-generated for Bazel migration

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:mocha/package_json.bzl", mocha_bin = "bin")

npm_link_all_packages(name = "node_modules")

package(default_visibility = ["//visibility:public"])

# ESM compilation
ts_project(
    name = "tinylicious_driver_esm",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    out_dir = "lib",
    root_dir = "src",
    source_map = True,
    tsconfig = "tsconfig.bazel.json",
    deps = [
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/routerlicious-driver",
        ":node_modules/jsrsasign",
        ":node_modules/uuid",
        "//packages/common/core-interfaces:lib",
        "//packages/common/driver-definitions:lib",
        "//packages/loader/driver-utils:lib",
        "//packages/drivers/routerlicious-driver:lib",
    ],
)

# CommonJS compilation
ts_project(
    name = "tinylicious_driver_cjs",
    srcs = glob(
        ["src/**/*.ts"],
        exclude = ["src/test/**"],
    ) + ["package.json"],
    composite = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
    source_map = True,
    transpiler = "tsc",
    tsconfig = "tsconfig.cjs.bazel.json",
    deps = [
        ":node_modules/@fluidframework/core-interfaces",
        ":node_modules/@fluidframework/driver-definitions",
        ":node_modules/@fluidframework/driver-utils",
        ":node_modules/@fluidframework/routerlicious-driver",
        ":node_modules/jsrsasign",
        ":node_modules/uuid",
        "//packages/common/core-interfaces:lib",
        "//packages/common/driver-definitions:lib",
        "//packages/loader/driver-utils:lib",
        "//packages/drivers/routerlicious-driver:lib",
    ],
)

# Wrapper for npm_package
js_library(
    name = "lib",
    srcs = [
        ":tinylicious_driver_cjs",
        ":tinylicious_driver_esm",
        "package.json",
    ],
)

# npm_package for TypeScript resolution
npm_package(
    name = "pkg",
    srcs = [
        ":lib",
    ],
    package = "@fluidframework/tinylicious-driver",
)


# ============================================================================
# API Extractor Integration (Phase 6)
# ============================================================================

# Generate entrypoint files for API Extractor
sh_binary(
    name = "generate_entrypoints",
    srcs = ["//tools/bazel:run-flub-entrypoints.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "lib",
    ],
    data = [
        ":tinylicious_driver_esm",
        "//tools/bazel:run-flub-entrypoints.sh",
    ],
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor.json
sh_binary(
    name = "api_reports",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-bundle.json
sh_binary(
    name = "api_reports_api-extractor-lint-bundle",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor/api-extractor-lint-bundle.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor/api-extractor-lint-bundle.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-public.cjs.json
sh_binary(
    name = "api_reports_api-extractor-lint-public.cjs",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor/api-extractor-lint-public.cjs.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor/api-extractor-lint-public.cjs.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-public.esm.json
sh_binary(
    name = "api_reports_api-extractor-lint-public.esm",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor/api-extractor-lint-public.esm.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor/api-extractor-lint-public.esm.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-testUtils.cjs.json
sh_binary(
    name = "api_reports_api-extractor-lint-testUtils.cjs",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor/api-extractor-lint-testUtils.cjs.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor/api-extractor-lint-testUtils.cjs.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Run API Extractor: api-extractor/api-extractor-lint-testUtils.esm.json
sh_binary(
    name = "api_reports_api-extractor-lint-testUtils.esm",
    srcs = ["//tools/bazel:run-api-extractor.sh"],
    args = [
        "packages/drivers/tinylicious-driver",
        "api-extractor/api-extractor-lint-testUtils.esm.json",
    ],
    data = [
        ":tinylicious_driver_esm",
        "api-extractor/api-extractor-lint-testUtils.esm.json",
        "tsconfig.json",
        "//tools/bazel:run-api-extractor.sh",
    ] + glob(["api-report/*.api.md"], allow_empty = True),
    tags = ["api-extraction"],
)

# Default target (backward compatibility)
filegroup(
    name = "tinylicious_driver",
    srcs = [
        ":tinylicious_driver_cjs",
        ":tinylicious_driver_esm",
    ],
)

# ============================================================================
# Test Integration (Session 4.3)
# ============================================================================
# Mocha test compilation with proper @types resolution

# Test compilation (ESM)
ts_project(
    name = "tinylicious_driver_test",
    srcs = glob(
        ["src/test/**/*.ts"],
        exclude = [
            "src/test/types/**",  # Type validation tests
            "src/test/**/*.d.ts",  # Type declaration files
        ],
    ) + glob(
        ["src/**/*.ts"],
        exclude = [
            "src/test/**",  # Already included above
            "src/cjs/**",  # CJS-specific files
        ],
    ) + ["package.json"],  # Fix TS1479: TypeScript needs package.json for module detection
    declaration = False,
    source_map = True,
    incremental = True,
    out_dir = "lib-test",
    root_dir = "src",
    tsconfig = "src/test/tsconfig.bazel.json",
    transpiler = "tsc",
    deps = [
		":tinylicious_driver_esm",  # For TypeScript module resolution
		":pkg",  # For runtime package resolution with subpath exports
		":node_modules/@types/mocha",
		":node_modules/@types/node",
		"//packages/common/core-interfaces:lib",
		"//packages/common/driver-definitions:lib",
		"//packages/loader/driver-utils:lib",
		"//packages/drivers/routerlicious-driver:lib",
		":node_modules/@fluidframework/core-interfaces",
		":node_modules/@fluidframework/driver-definitions",
		":node_modules/@fluidframework/driver-utils",
		":node_modules/@fluidframework/routerlicious-driver",
		":node_modules/jsrsasign",
		":node_modules/uuid",
	],
)

# Mocha test runner
mocha_bin.mocha_test(
    name = "test",
    args = [
        "packages/drivers/tinylicious-driver/lib-test/test/**/*.spec.js",
        "--exit",
    ],
    data = [
        ":tinylicious_driver_test",
        ":pkg",  # Runtime needs package with subpath exports,
        "package.json",
    ],
    tags = ["manual"],  # Mark as manual until validated
)
